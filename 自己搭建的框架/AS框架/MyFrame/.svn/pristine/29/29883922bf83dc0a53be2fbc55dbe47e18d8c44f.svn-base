package com.alnton.myframecore.view.ListView.crossDeleteListView.pullToRefresh;

import android.content.Context;
import android.util.AttributeSet;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.animation.Animation;
import android.view.animation.RotateAnimation;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.TextView;

import com.alnton.myframecore.R;

public class PullToRefreshListHeader extends LinearLayout
{
    private LinearLayout mContainer;
    
    private ImageView head_arrowImageView;
    
    private ProgressBar head_progressBar;
    
    private TextView head_tipsTextView;
    
    private int mState = STATE_NORMAL;
    
    private Animation mRotateUpAnim;
    
    private Animation mRotateDownAnim;
    
    private final int ROTATE_ANIM_DURATION = 180;
    
    public final static int STATE_NORMAL = 0;
    
    public final static int STATE_READY = 1;
    
    public final static int STATE_REFRESHING = 2;
    
    public PullToRefreshListHeader(Context context)
    {
        super(context);
        initView(context);
    }
    
    /**
     * @param context
     * @param attrs
     */
    public PullToRefreshListHeader(Context context, AttributeSet attrs)
    {
        super(context, attrs);
        initView(context);
    }
    
    private void initView(Context context)
    {
        LayoutParams lp = new LayoutParams(LayoutParams.FILL_PARENT, 0);
        mContainer = (LinearLayout)LayoutInflater.from(context).inflate(R.layout.pull_to_refresh_head, null);
        addView(mContainer, lp);
        setGravity(Gravity.BOTTOM);
        
        head_arrowImageView = (ImageView)findViewById(R.id.head_arrowImageView);
        head_tipsTextView = (TextView)findViewById(R.id.head_tipsTextView);
        head_progressBar = (ProgressBar)findViewById(R.id.head_progressBar);
        
        mRotateUpAnim =
            new RotateAnimation(0.0f, -180.0f, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);
        mRotateUpAnim.setDuration(ROTATE_ANIM_DURATION);
        mRotateUpAnim.setFillAfter(true);
        mRotateDownAnim =
            new RotateAnimation(-180.0f, 0.0f, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);
        mRotateDownAnim.setDuration(ROTATE_ANIM_DURATION);
        mRotateDownAnim.setFillAfter(true);
    }
    
    public void setState(int state)
    {
        if (state == mState)
            return;
        
        if (state == STATE_REFRESHING)
        {
            head_arrowImageView.clearAnimation();
            head_arrowImageView.setVisibility(View.INVISIBLE);
            head_progressBar.setVisibility(View.VISIBLE);
        }
        else
        {
            head_arrowImageView.setVisibility(View.VISIBLE);
            head_progressBar.setVisibility(View.INVISIBLE);
        }
        
        switch (state)
        {
            case STATE_NORMAL:
                if (mState == STATE_READY)
                {
                    head_arrowImageView.startAnimation(mRotateDownAnim);
                }
                if (mState == STATE_REFRESHING)
                {
                    head_arrowImageView.clearAnimation();
                }
                head_tipsTextView.setText(R.string.pull_to_refresh_pull_label);
                break;
            case STATE_READY:
                if (mState != STATE_READY)
                {
                    head_arrowImageView.clearAnimation();
                    head_arrowImageView.startAnimation(mRotateUpAnim);
                    head_tipsTextView.setText(R.string.pull_to_refresh_release_label);
                }
                break;
            case STATE_REFRESHING:
                head_tipsTextView.setText(R.string.pull_to_refresh_refreshing_label);
                break;
            default:
        }
        
        mState = state;
    }
    
    public void setVisiableHeight(int height)
    {
        if (height < 0)
            height = 0;
        LayoutParams lp = (LayoutParams)mContainer.getLayoutParams();
        lp.height = height;
        mContainer.setLayoutParams(lp);
    }
    
    public int getVisiableHeight()
    {
        return mContainer.getHeight();
    }
    
}
