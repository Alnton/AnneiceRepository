package com.alnton.myframe.application;

import java.util.LinkedList;

import android.app.Activity;
import android.app.Application;
import android.content.Context;
import android.view.LayoutInflater;
import cn.jpush.android.api.JPushInterface;

import com.alnton.myFrameCore.util.CrashHandler;
import com.alnton.myFrameCore.util.DebugLogUtil;
import com.alnton.myFrameCore.util.FileUtil;
import com.alnton.myFrameCore.util.ImageUtil;
import com.alnton.myFrameCore.util.SharedPreferencesUtil;
import com.alnton.myframe.R;
import com.alnton.myframe.config.Config.FilePathConfig;
import com.alnton.myframe.config.Config.URLConfig;
import com.alnton.myframe.ui.pay.qq.QQConstants;
import com.alnton.myframe.wxapi.WXConstants;
import com.google.gson.Gson;
import com.tencent.mm.sdk.openapi.IWXAPI;
import com.tencent.mm.sdk.openapi.WXAPIFactory;
import com.tencent.tauth.Tencent;

/**
 * <存放应用程序级的全局变量>
 * @author  王乾州
 */
public class Session extends Application
{
    /**
     * 单例模式
     */
    public static Session instance;
    
    /**
     * 缓存各个Activity，目的是为了完全退出应用
     */
    private LinkedList<Activity> activityList;
    
    /**
     * IWXAPI 是第三方app和微信通信的openapi接口
     */
    public IWXAPI wxAPI;
    
    /**
     * QQ登录
     */
    public Tencent mTencent;
    
    /**
     * 是否对报文进行加解密
     * true:  加密
     * false: 不加密
     */
    public boolean isEncode;
    
    /**
     * 布局反射器
     */
    public LayoutInflater inflater;
    
    /**
     * SharedPreferences工具类
     */
    public SharedPreferencesUtil sharedPreferencesUtil;
    
    /**
     * Gson 工具
     */
    public Gson gson;
    
    public static Session getInstance()
    {
        return instance;
    }
    
    @Override
    public void onCreate()
    {
        /**
         * 初始化数据
         */
        initData();
        
        super.onCreate();
    }
    
    /**
     * 初始化数据
     */
    private void initData()
    {
        instance = this;
        
        //初始化ImageLoader
        ImageUtil.getInstance().initImageLoader(this, FilePathConfig.imageFileDirectory, R.drawable.default_pic);
        
        // 是否打印调试的程序日志
        DebugLogUtil.ISDEBUG = true;
        
        // 程序出现的崩溃是否写入SD卡
        CrashHandler.getInstance().init(this, FilePathConfig.logFileDirectory, URLConfig.UPLOAD_EXCEPTION_URL);
        
        // 是否对报文进行加解密 默认为true 加密
        isEncode = true;
        
        /**
         * 刚开始就把根目录文件夹创建好
         */
        FileUtil.getInstance().createDirectory(FilePathConfig.projectFileDirectory);
        
        /**
         * 初始化 JPush
         */
        JPushInterface.init(this);
        
        /**
         * 通过WXAPIFactory工厂，获取IWXAPI的实例
         * checkSignature(最后一个参数):Check whether the WeChat client uses official signature
         * 是否检查是否官方微信客户端使用签名 设置为false 不检查
         */
        wxAPI = WXAPIFactory.createWXAPI(this, WXConstants.APP_ID, false);
        
        /**
         * 将应用的APPID注册到微信
         */
        wxAPI.registerApp(WXConstants.APP_ID);
        
        /**
         * 初始化Tencent 
         */
        mTencent = Tencent.createInstance(QQConstants.QQ_APPID, this);
        
        activityList = new LinkedList<Activity>();
        
        inflater = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        
        sharedPreferencesUtil = new SharedPreferencesUtil(this, MODE_PRIVATE);
        
        gson = new Gson();
    }
    
    /**
     * <添加Activity到容器中>
     */
    public void addActivity(Activity activity)
    {
        activityList.add(activity);
    }
    
    /**
     * <遍历所有Activity并finish>
     */
    public void exit()
    {
        for (Activity activity : activityList)
        {
            activity.finish();
        }
        android.os.Process.killProcess(android.os.Process.myPid());
    }
    
    /**
     * 根据名字移除Activity
     */
    public void removeActivityByName(String... activityName)
    {
        for (Activity activity : activityList)
        {
            for (String string : activityName)
            {
                if (null != activity && activity.getClass().getSimpleName().equals(string))
                {
                    activity.finish();
                }
            }
        }
    }
    
    /**
     * 移除全部的不是首页的Activity
     */
    public void removeNotMainActivity()
    {
        for (Activity activity : activityList)
        {
            if (null != activity && !activity.getClass().getSimpleName().equals("MainActivity"))
            {
                activity.finish();
            }
        }
    }
    
    /**
     * 得到activityList 的大小
     */
    public int getActivityListSize()
    {
        if (null != activityList)
        {
            return activityList.size();
        }
        else
        {
            return 0;
        }
    }
}