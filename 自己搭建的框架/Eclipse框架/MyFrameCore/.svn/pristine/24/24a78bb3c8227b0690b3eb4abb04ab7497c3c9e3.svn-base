package com.alnton.myFrameCore.util;

import java.math.BigDecimal;

/**
 * <采用BigDecimal对于加，减，乘，除做一个精确的算法>
 * scale 精确度不能小于0
 * @author  王乾州
 */
public class BigDecimalUtil
{
    /**
     * 提供精确四舍五入加法计算的add方法
     * @param value1 被加数
     * @param value2 加数
     * @param scale  保留小数点后几位
     * @return 两个参数的和
     */
    public static double add(double value1, double value2, int scale)
    {
        BigDecimal b1 = new BigDecimal(Double.valueOf(value1));
        BigDecimal b2 = new BigDecimal(Double.valueOf(value2));
        return b1.add(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).doubleValue();
    }
    
    /**
     * 提供精确四舍五入减法运算的sub方法
     * @param value1 被减数
     * @param value2 减数
     * @param scale  保留小数点后几位
     * @return 两个参数的差
     */
    public static double sub(double value1, double value2, int scale)
    {
        BigDecimal b1 = new BigDecimal(Double.valueOf(value1));
        BigDecimal b2 = new BigDecimal(Double.valueOf(value2));
        return b1.subtract(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).doubleValue();
    }
    
    /**
     * 提供精确四舍五入乘法运算的mul方法
     * @param value1 被乘数
     * @param value2 乘数
     * @param scale  保留小数点后几位
     * @return 两个参数的积
     */
    public static double mul(double value1, double value2, int scale)
    {
        BigDecimal b1 = new BigDecimal(Double.valueOf(value1));
        BigDecimal b2 = new BigDecimal(Double.valueOf(value2));
        return b1.multiply(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).doubleValue();
    }
    
    /**
     * 提供精确四舍五入的除法运算方法div
     * @param value1 被除数
     * @param value2 除数
     * @param scale  保留小数点后几位
     * @return 两个参数的商
     */
    public static double div(double value1, double value2, int scale)
    {
        BigDecimal b1 = new BigDecimal(Double.valueOf(value1));
        BigDecimal b2 = new BigDecimal(Double.valueOf(value2));
        return b1.divide(b2, scale, BigDecimal.ROUND_HALF_UP).doubleValue();
    }
}