package com.alnton.myFrameCore.util;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigDecimal;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.text.DecimalFormat;
import java.util.ArrayList;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.impl.client.DefaultHttpClient;

import android.net.Uri;
import android.os.Handler;
import android.text.TextUtils;

/**
 * <文件管理器工具类>
 * @author  王乾州
 * @createon 2014年7月2日
 */
public class FileUtil
{
    private static FileUtil fileUtils;
    
    public static FileUtil getInstance()
    {
        if (null == fileUtils)
        {
            fileUtils = new FileUtil();
        }
        return fileUtils;
    }
    
    /**
     * 指定路径下的所有目录
     */
    public ArrayList<File> allFileDirectory = new ArrayList<File>();
    
    /**
     * 指定路径下的所有文件
     */
    public ArrayList<File> allFile = new ArrayList<File>();
    
    public final int SIZETYPE_B = 1;//获取文件大小单位为B的double值
    
    public final int SIZETYPE_KB = 2;//获取文件大小单位为KB的double值
    
    public final int SIZETYPE_MB = 3;//获取文件大小单位为MB的double值
    
    public final int SIZETYPE_GB = 4;//获取文件大小单位为GB的double值
    
    /**
     * 创建文件夹目录
     * @param  directory  目录文件夹的路径
     * @return 返回目录文件
     */
    public File createDirectory(String directory)
    {
        File file = new File(directory);
        if (null != file && !file.exists())
        {
            file.mkdirs();
        }
        return file;
    }
    
    /**
     * 创建文件
     * @param path
     *            文件路径
     * @return 创建的文件
     */
    public File createNewFile(String path)
    {
        File file = new File(path);
        if (null != file && !file.exists())
        {
            try
            {
                file.createNewFile();
            }
            catch (IOException e)
            {
                e.printStackTrace();
                return null;
            }
        }
        return file;
    }
    
    /**
     * 创建指定大小文件
     * @param filepath
     * @param length
     */
    public void createSizeFile(String filepath, long length)
    {
        File file = new File(filepath);
        if (!file.exists())
        {
            createSizeFile(file, length);
        }
        else if (file.exists() && file.length() != length)
        {
            file.delete();
            createSizeFile(file, length);
        }
    }
    
    private boolean createSizeFile(File file, Long fileLength)
    {
        FileOutputStream fos = null;
        try
        {
            if (!file.exists())
            {
                file.createNewFile();
            }
            
            long batchSize = 0;
            batchSize = fileLength;
            
            batchSize = 1024 * 1024 * 3;
            
            long count = fileLength / batchSize;
            long last = fileLength % batchSize;
            
            fos = new FileOutputStream(file);
            FileChannel fileChannel = fos.getChannel();
            for (int i = 0; i < count; i++)
            {
                ByteBuffer buffer = ByteBuffer.allocate((int)batchSize);
                fileChannel.write(buffer);
            }
            
            ByteBuffer buffer = ByteBuffer.allocate((int)last);
            fileChannel.write(buffer);
            fos.close();
            return true;
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
        finally
        {
            try
            {
                if (fos != null)
                {
                    fos.close();
                }
            }
            catch (IOException e)
            {
                e.printStackTrace();
            }
        }
        return false;
    }
    
    /**
     * 删除文件夹
     * @param folderPath
     *            文件夹的路径
     */
    public boolean delFolder(String folderPath)
    {
        try
        {
            delAllFile(folderPath);
            
            /**
             * 先要对删除的文件夹进行重命名，否则Android会对删除文件进行加锁，下次就创建不了了
             */
            File file = createDirectory(folderPath);
            File to = new File(file.getAbsolutePath() + System.currentTimeMillis());
            to.mkdirs();
            file.renameTo(to);
            
            return to.delete();
        }
        catch (Exception e)
        {
            e.printStackTrace();
            return false;
        }
    }
    
    /**
     * 递归删除所有文件夹下面的文件
     * @param path
     *            文件的路径
     */
    public void delAllFile(String path)
    {
        File root = new File(path);
        if (null != root && root.exists())
        {
            File[] files = root.listFiles();
            for (File file : files)
            {
                if (null != file)
                {
                    if (file.isDirectory())
                    {
                        /**
                         * 递归调用
                         */
                        delAllFile(file.getAbsolutePath());
                    }
                    else
                    {
                        file.delete();
                    }
                }
            }
        }
    }
    
    /**
     * 获取文件的Uri
     * @param path
     *            文件的路径
     * @return
     */
    public Uri getUriFromFile(String path)
    {
        File file = new File(path);
        return Uri.fromFile(file);
    }
    
    /**
     * 根据文件绝对路径获取文件名
     * 
     * @param filePath
     * @return
     */
    public String getFileName(String filePath)
    {
        if (TextUtils.isEmpty(filePath))
            return "";
        return filePath.substring(filePath.lastIndexOf(File.separator) + 1);
    }
    
    /**
     * 获取文件扩展名
     * 
     * @param fileName
     * @return
     */
    public String getFileFormat(String fileName)
    {
        if (TextUtils.isEmpty(fileName))
            return "";
        
        int point = fileName.lastIndexOf('.');
        return fileName.substring(point + 1);
    }
    
    /**
     * 通过递归得到某一路径下所有的目录及其文件
     */
    public void getFiles(String filePath)
    {
        File root = new File(filePath);
        File[] files = root.listFiles();
        for (File file : files)
        {
            if (file.isDirectory())
            {
                allFileDirectory.add(file);
                /**
                 * 递归调用
                 */
                getFiles(file.getAbsolutePath());
            }
            else
            {
                allFile.add(file);
            }
        }
    }
    
    /**
    * 获取文件指定文件的指定单位的大小
    * @param filePath 文件路径
    * @param sizeType 获取大小的类型1为B、2为KB、3为MB、4为GB
    * @return double值的大小
    */
    public double getFileOrFilesSize(String filePath, int sizeType)
    {
        File file = new File(filePath);
        long blockSize = 0;
        try
        {
            if (file.isDirectory())
            {
                blockSize = getDirectorySize(file);
            }
            else
            {
                blockSize = getFileSize(file);
            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        return FormetFileSize(blockSize, sizeType);
    }
    
    /**
    * 调用此方法自动计算指定文件或指定文件夹的大小
    * @param filePath 文件路径
    * @return 计算好的带B、KB、MB、GB的字符串
    */
    public String getAutoFileOrFilesSize(String filePath)
    {
        File file = new File(filePath);
        long blockSize = 0;
        try
        {
            if (file.isDirectory())
            {
                blockSize = getDirectorySize(file);
            }
            else
            {
                blockSize = getFileSize(file);
            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        return FormetFileSize(blockSize);
    }
    
    /**
    * 获取指定文件大小
    * @param f
    * @return
    * @throws Exception
    */
    public long getFileSize(File file)
        throws Exception
    {
        long size = 0;
        if (file.exists())
        {
            FileInputStream fis = null;
            fis = new FileInputStream(file);
            size = fis.available();
        }
        else
        {
            file.createNewFile();
        }
        return size;
    }
    
    /**
    * 获取指定文件夹大小
    * @param f
    * @return
    * @throws Exception
    */
    public long getDirectorySize(File f)
        throws Exception
    {
        long size = 0;
        File flist[] = f.listFiles();
        for (int i = 0; i < flist.length; i++)
        {
            if (flist[i].isDirectory())
            {
                size = size + getDirectorySize(flist[i]);
            }
            else
            {
                size = size + getFileSize(flist[i]);
            }
        }
        return size;
    }
    
    /**
     * 转换文件大小
     * @param fileS
     * @return
     */
    private String FormetFileSize(long fileS)
    {
        DecimalFormat df = new DecimalFormat("#.00");
        String fileSizeString = "";
        String wrongSize = "0B";
        if (fileS == 0)
        {
            return wrongSize;
        }
        if (fileS < 1024)
        {
            fileSizeString = df.format((double)fileS) + "B";
        }
        else if (fileS < 1048576)
        {
            fileSizeString = df.format((double)fileS / 1024) + "KB";
        }
        else if (fileS < 1073741824)
        {
            fileSizeString = df.format((double)fileS / 1048576) + "MB";
        }
        else
        {
            fileSizeString = df.format((double)fileS / 1073741824) + "GB";
        }
        return fileSizeString;
    }
    
    /**
     * 转换文件大小,指定转换的类型
     * @param fileS 
     * @param sizeType 
     * @return
     */
    private double FormetFileSize(long fileS, int sizeType)
    {
        DecimalFormat df = new DecimalFormat("#.00");
        double fileSizeLong = 0;
        switch (sizeType)
        {
            case SIZETYPE_B:
                fileSizeLong = Double.valueOf(df.format((double)fileS));
                break;
            case SIZETYPE_KB:
                fileSizeLong = Double.valueOf(df.format((double)fileS / 1024));
                break;
            case SIZETYPE_MB:
                fileSizeLong = Double.valueOf(df.format((double)fileS / 1048576));
                break;
            case SIZETYPE_GB:
                fileSizeLong = Double.valueOf(df.format((double)fileS / 1073741824));
                break;
            default:
                break;
        }
        return fileSizeLong;
    }
    
    /** 
     * 复制单个文件 
     * @param oldPath String 原文件路径 如：c:/fqf.txt 
     * @param newPath String 复制后路径 如：f:/fqf.txt 
     * @return boolean 
     */
    public boolean copyFile(String oldPath, String newPath)
    {
        boolean resultCopyFile = false;
        try
        {
            int byteread = 0;
            File oldfile = new File(oldPath);
            if (oldfile.exists())
            {
                //文件存在时 
                InputStream inStream = new FileInputStream(oldPath); //读入原文件 
                FileOutputStream fs = new FileOutputStream(newPath);
                byte[] buffer = new byte[1444];
                while ((byteread = inStream.read(buffer)) != -1)
                {
                    fs.write(buffer, 0, byteread);
                }
                fs.flush();
                
                fs.close();
                inStream.close();
                
                resultCopyFile = true;
            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        return resultCopyFile;
    }
    
    /**
     * <网络下载文件到SD卡>
     * @param filePath: 网络远程文件的地址
     * @param saveFile: 保存到本地的文件路径
     * @param mHandler: 展示进度的Handler
     */
    public synchronized File downLoadFileToSD(String filePath, File saveFile, Handler mHandler)
        throws Exception
    {
        int count = 0;
        
        long length = 0;
        
        if (TextUtils.isEmpty(filePath))
        {
            return null;
        }
        
        /** 下载第一步：首先判断SDCard是否存在 */
        String SDPath = TelephoneUtil.getInstance().getSDPath();
        
        /** 下载第二步：如果sdcard不存在返回，反之下载 */
        if (null == SDPath)
        {
            return null;
        }
        /** 下载第三步：sdcard存在  */
        else
        {
            DefaultHttpClient client = new DefaultHttpClient();
            HttpUriRequest request = new HttpGet(filePath.trim());
            HttpResponse response = client.execute(request);
            HttpEntity entity = response.getEntity();
            length = entity.getContentLength();
            InputStream is = entity.getContent();
            
            FileOutputStream fileoutputstream = null;
            
            if (is != null)
            {
                fileoutputstream = new FileOutputStream(saveFile);
                byte[] buf = new byte[1024 * 10];
                int ch = -1;
                
                while ((ch = is.read(buf)) != -1)
                {
                    fileoutputstream.write(buf, 0, ch);
                    count += ch;
                    
                    // 更新进度
                    try
                    {
                        if (null != mHandler)
                        {
                            BigDecimal countBigDecimal = new BigDecimal(count);
                            BigDecimal progressBigDecimal =
                                countBigDecimal.multiply(new BigDecimal(100)).divide(new BigDecimal(length), 2);
                            mHandler.sendEmptyMessage(progressBigDecimal.intValue());
                        }
                    }
                    catch (Exception e)
                    {
                        e.printStackTrace();
                    }
                }
                
                if (null != fileoutputstream)
                {
                    fileoutputstream.flush();
                    fileoutputstream.close();
                }
                is.close();
            }
        }
        
        return saveFile;
    }
    
    /**
     * <字节数组直接转化为文件到SD卡>
     * @param data: 字节数组
     * @param saveFile: 保存到本地的文件路径
     * @param mHandler: 展示进度的Handler
     * @param isNewLine:是否要换行
     * @param isAppen:  是否要追加（true:追加  false:覆盖）
     */
    public synchronized File byteToSDFile(byte[] data, File saveFile, Handler mHandler, boolean isNewLine,
        boolean isAppen)
        throws Exception
    {
        int count = 0;
        
        long length = 0;
        
        /** 第一步：首先判断SDCard是否存在 */
        String SDPath = TelephoneUtil.getInstance().getSDPath();
        
        /** 第二步：如果sdcard不存在返回，反之下载 */
        if (null == SDPath)
        {
            return null;
        }
        /** 第三步：sdcard存在  */
        else
        {
            length = data.length;
            ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(data);
            FileOutputStream fileoutputstream = new FileOutputStream(saveFile, isAppen);
            byte[] buf = new byte[1024 * 10];
            int ch = -1;
            
            while ((ch = byteArrayInputStream.read(buf)) != -1)
            {
                fileoutputstream.write(buf, 0, ch);
                count += ch;
                
                // 更新进度
                try
                {
                    if (null != mHandler)
                    {
                        BigDecimal countBigDecimal = new BigDecimal(count);
                        BigDecimal progressBigDecimal =
                            countBigDecimal.multiply(new BigDecimal(100)).divide(new BigDecimal(length), 2);
                        mHandler.sendEmptyMessage(progressBigDecimal.intValue());
                    }
                }
                catch (Exception e)
                {
                    e.printStackTrace();
                }
            }
            
            if (isNewLine)
            {
                fileoutputstream.write("\r\n".getBytes());
            }
            
            if (null != fileoutputstream)
            {
                fileoutputstream.flush();
                fileoutputstream.close();
            }
            byteArrayInputStream.close();
        }
        
        return saveFile;
    }
    
    /**
     * <在内存文件中写入字节数组>
     * @param data: 字节数组
     * @param saveFile: 保存到本地的文件路径
     * @param isNewLine:是否要换行
     * @param isAppen:  是否要追加（true:追加  false:覆盖）
     */
    public synchronized File byteToMemoryFile(byte[] data, File saveFile, boolean isNewLine, boolean isAppen)
        throws Exception
    {
        if (null != saveFile)
        {
            if (!saveFile.exists())
            {
                createNewFile(saveFile.getAbsolutePath());
            }
            Runtime.getRuntime().exec("chmod 777 " + saveFile.getAbsolutePath());
            
            ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(data);
            FileOutputStream fileoutputstream = new FileOutputStream(saveFile, isAppen);
            byte[] buf = new byte[1024 * 10];
            int ch = -1;
            
            while ((ch = byteArrayInputStream.read(buf)) != -1)
            {
                fileoutputstream.write(buf, 0, ch);
            }
            
            if (isNewLine)
            {
                fileoutputstream.write("\r\n".getBytes());
            }
            
            if (null != fileoutputstream)
            {
                fileoutputstream.flush();
                fileoutputstream.close();
            }
            byteArrayInputStream.close();
        }
        return saveFile;
    }
    
    /**
     * <在内存文件中写入输入流>
     * @param data: 字节数组
     * @param saveFile: 保存到本地的文件路径
     * @param isNewLine:是否要换行
     * @param isAppen:  是否要追加（true:追加  false:覆盖）
     */
    public synchronized File inputStreamToMemoryFile(InputStream data, File saveFile, boolean isNewLine, boolean isAppen)
        throws Exception
    {
        if (null != saveFile)
        {
            if (!saveFile.exists())
            {
                createNewFile(saveFile.getAbsolutePath());
            }
            Runtime.getRuntime().exec("chmod 777 " + saveFile.getAbsolutePath());
            
            FileOutputStream fileoutputstream = new FileOutputStream(saveFile, isAppen);
            
            int len = -1;
            byte[] b = new byte[1024 * 10];
            while ((len = data.read(b)) != -1)
            {
                fileoutputstream.write(b, 0, len);
            }
            
            if (isNewLine)
            {
                fileoutputstream.write("\r\n".getBytes());
            }
            
            fileoutputstream.flush();
            fileoutputstream.close();
            data.close();
        }
        return saveFile;
    }
    
    /**
     * 深层拷贝对象
     */
    public Object deepCopy(Object src)
    {
        ObjectOutputStream out = null;
        ObjectInputStream in = null;
        Object object = null;
        try
        {
            ByteArrayOutputStream byteOut = new ByteArrayOutputStream();
            out = new ObjectOutputStream(byteOut);
            out.writeObject(src);
            
            ByteArrayInputStream byteIn = new ByteArrayInputStream(byteOut.toByteArray());
            in = new ObjectInputStream(byteIn);
            object = in.readObject();
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        finally
        {
            try
            {
                if (null != out)
                {
                    out.close();
                }
                
                if (null != in)
                {
                    in.close();
                }
            }
            catch (Exception e2)
            {
                e2.printStackTrace();
            }
        }
        
        return object;
    }
}