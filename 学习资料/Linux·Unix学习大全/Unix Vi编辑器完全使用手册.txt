Unix Vi编辑器完全使用手册

建议：本文是针对初学Unix Vi编辑器的网友的，而文后所付的详尽的命令表也可作为已经熟练使用vi的网友的参考之用，因此你最好下载本文或打印本文然后对照实践学习。 
一、Unix编辑器概述 

编辑器是使用计算机的重要工具之一，在各种操作系统中，编辑器都是必不可少的部件。Unix及其相似的ix 

操作系统系列中，为方便各种用户在各个不同的环境中使用，提供了一系列的ex编辑器，包括 ex, edit,ed 和 

vi.其中ex,edit,ed都是行编辑器，现在已很少有人使用，Unix提供他们的原因是考虑到满足各种用户特别 

是某些终端用户的需要。 

值得庆幸的是，Unix提供了全屏幕的Vi编辑器，这使我们的工作轻松不少。不少DOS用户抱怨Vi编辑器不象 

DOS下的编辑器如edit那么好用，这是因为Vi考虑到各种用户的需要，没有使用某些通用的编辑键（在各个 

不同的终端机上他们的定义是不同的，在某些终端机上甚至没有这些键）。而是采用状态切换的方法，但这 

只是习惯的问题，一旦你熟练的使用上了vi你就会觉得它其实也很好用。 

虽然 Vi采用了状态切换的方法，但电脑的硬件及操作系统多种多样，某些电脑的键盘上没有特定的几个功 

能键！那麽不就有某些功能不能用了？这个问题在 Unix 系统上也一样，几乎各大电脑厂商都有自己的  

Unix 系统，而 vi 的操作方法也会随之有点出入。这里我们采用 PC 的键盘来说明 vi 的操作，但在具体 

的环境中还要参考相应的资料，这一点是值得注意的。 

二、Vi入门 

（一）、进入vi 

在系统提示字符(如$、#)下敲入vi ＜档案名称＞，vi 可以自动帮你载入所要编辑的文件或是开启一个新 

文件（如果该文件不存在或缺少文件名）。进入 vi 后萤幕左方会出现波浪符号，凡是列首有该符号就代 

表此列目前是空的。 

(二）、两种模式 

如上所述，vi存在两种模式：指令模式和输入模式。在指令模式下输入的按键将做为指令来处理：如输入 

a，vi即认为是在当前位置插入字符。而在输入模式下，vi则把输入的按键当作插入的字符来处理。指令 

模式切换到输入模式只需键入相应的输入命令即可（如a,A），而要从输入模式切换到指令模式，则需在 

输入模式下键入ESC键，如果不晓得现在是处於什麽模式，可以多按几次 [ESC]，系统如发出哔哔声就表 

示已处于指令模式下了。 

付：有指令模式进入输入模式的指令： 

新增 (append) 

a ：从光标所在位置後面开始新增资料，光标後的资料随新增资料向後移动。 

A： 从光标所在列最後面的地方开始新增资料。 

插入 (insert) 

i： 从光标所在位置前面开始插入资料，光标後的资料随新增资料向後移动。 

I ：从光标所在列的第一个非空白字元前面开始插入资料。 

开始 (open) 

o ：在光标所在列下新增一列并进入输入模式。 

O: 在光标所在列上方新增一列并进入输入模式。 

（三）、退出vi 

在指令模式下键入:q,:q!,:wq或:x(注意:号），就会退出vi。其中:wq和:x是存盘退出，而:q是直接退出， 

如果文件已有新的变化，vi会提示你保存文件而:q命令也会失效，这时你可以用:w命令保存文件后再用:q 

退出，或用:wq或:x命令退出，如果你不想保存改变后的文件，你就需要用:q!命令，这个命令将不保存文件 

而直接退出vi。 

（四）、基本编辑 

配合一般键盘上的功能键，像是方向键、[Insert] 、[Delete] 等等，现在你应该已经可以利用 vi 来编辑文件 

了。当然 vi 还提供其他许许多多功能让文字的处理更为方便。 

何谓编辑？一般认为是文字的新增、修改以及删除，甚至包括文字区块的搬移、复制等等。先这里介绍 vi 

的如何做删除与修改。（注意：在 vi 的原始观念里，输入跟编辑是两码子事。编辑是在指令模式下操作 

的，先利用指令移动光标来定位要进行编辑的地方，然後才下指令做编辑。） 

删除与修改文件的命令： 

x： 删除光标所在字符。 

dd ：删除光标所在的列。 

r ：修改光标所在字元，r 後接著要修正的字符。 

R： 进入取替换状态，新增文字会覆盖原先文字，直到按 [ESC] 回到指令模式下为止。 

s： 删除光标所在字元，并进入输入模式。 

S： 删除光标所在的列，并进入输入模式。 

其实呢，在PC上根本没有这麽麻烦！输入跟编辑都可以在输入模式下完成。例如要删除字元，直接按  
[Delete] 不就得了。而插入状态与取代状态可以直接用 [Insert] 切换，犯不著用什麽指令模式的编 
辑指令。不过就如前面所提到的，这些指令几乎是每台终端机都能用，而不是仅仅在 PC 上。 
在指令模式下移动光标的基本指令是 h, j, k, l 。想来各位现在也应该能猜到只要直接用 PC 的方向 
键就可以了，而且无论在指令模式或输入模式下都可以。多容易不是。 
当然 PC 键盘也有不足之处。有个很好用的指令 u 可以恢复被删除的文字，而 U 指令则可以恢复光标所 
在列的所有改变。这与某些电脑上的 [Undo] 按键功能相同。 
三、附件：vi详细指令表 
（一）、基本编辑指令： 
新增 (append) 

a ：从光标所在位置後面开始新增资料，光标後的资料随新增资料向後移动。 

A： 从光标所在列最後面的地方开始新增资料。 

插入 (insert) 

i： 从光标所在位置前面开始插入资料，光标後的资料随新增资料向後移动。 

I ：从光标所在列的第一个非空白字元前面开始插入资料。 

开始 (open) 

o ：在光标所在列下新增一列并进入输入模式。 

O: 在光标所在列上方新增一列并进入输入模式。 

x： 删除光标所在字符。 

dd ：删除光标所在的列。 

r ：修改光标所在字元，r 後接著要修正的字符。 

R： 进入取替换状态，新增文字会覆盖原先文字，直到按 [ESC] 回到指令模式下为止。 

s： 删除光标所在字元，并进入输入模式。 

S： 删除光标所在的列，并进入输入模式。 

（二）、光标移动指令： 
由於许多编辑工作是藉由光标来定位，所以 vi 提供许多移动光标的方式，这个我们列 
几张简表来说明（这些当然是指令模式下的指令）： 
┌―――――┬―――――――――――――┬―――――┐ 
│指令      │说明                      │功能键    │ 
├―――――┼―――――――――――――┼―――――┤ 
│0         │移动到光标所在列的最前面  │[Home]    │ 
├―――――┼―――――――――――――┼―――――┤ 
│$         │移动到光标所在列的最後面  │[End]     │ 
├―――――┼―――――――――――――┼―――――┤ 
│[CTRL][d] │向下半页                  │          │ 
├―――――┼―――――――――――――┼―――――┤ 
│[CTRL][f] │向下一页                  │[PageDown]│ 
├―――――┼―――――――――――――┼―――――┤ 
│[CTRL][u] │向上半页                  │          │ 
├―――――┼―――――――――――――┼―――――┤ 
│[CTRL][b] │向上一页                  │ [PageUp] │ 
└―――――┴―――――――――――――┴―――――┘ 
┌――┬―――――――――――――――――┐ 
│指令│说明                              │ 
├――┼―――――――――――――――――┤ 
│H   │移动到视窗的第一列                │ 
├――┼―――――――――――――――――┤ 
│M   │移动到视窗的中间列                │ 
├――┼―――――――――――――――――┤ 
│L   │移动到视窗的最後列                │ 
├――┼―――――――――――――――――┤ 
│b   │移动到下个字的第一个字母          │ 
├――┼―――――――――――――――――┤ 
│w   │移动到上个字的第一个字母          │ 
├――┼―――――――――――――――――┤ 
│e   │移动到下个字的最後一个字母        │ 
├――┼―――――――――――――――――┤ 
│^   │移动到光标所在列的第一个非空白字元│ 
└――┴―――――――――――――――――┘ 
┌――┬―――――――――――――――――――┐ 
│指令│说明                                  │ 
├――┼―――――――――――――――――――┤ 
│n-  │减号移动到上一列的第一个非空白字元    │ 
│    │前面加上数字可以指定移动到以上 n 列   │ 
├――┼―――――――――――――――――――┤ 
│n+  │加号移动到下一列的第一个非空白字元    │ 
│    │前面加上数字可以指定移动到以下 n 列   │ 
├――┼―――――――――――――――――――┤ 
│nG  │直接用数字 n 加上大写 G 移动到第 n 列 │ 
└――┴―――――――――――――――――――┘ 
┌――――┬―――――――――――――――┐ 
│指令    │说明                          │ 
├――――┼―――――――――――――――┤ 
│fx      │往右移动到 x 字元上           │ 
│Fx      │往左移动到 x 字元上           │ 
├――――┼―――――――――――――――┤ 
│tx      │往右移动到 x 字元前           │ 
│Tx      │往左移动到 x 字元前           │ 
├――――┼―――――――――――――――┤ 
│;       │配合 f&t 使用，重复一次       │ 
│,       │配合 f&t 使用，反方向重复一次 │ 
├――――┼―――――――――――――――┤ 
│/string │往右移动到有 string 的地方    │ 
│?string │往左移动到有 string 的地方    │ 
├――――┼―――――――――――――――┤ 
│n       │配合 /&? 使用，重复一次       │ 
│N       │配合 /&? 使用，反方向重复一次 │ 
└――――┴―――――――――――――――┘ 
┌――――┬―――――――――――――――――――┬――――――――――┐ 
│指令    │说明                                  │备注                │ 
├――――┼―――――――――――――――――――┼――――――――――┤ 
│n(      │左括号移动到句子的最前面              │句子是以            │ 
│        │前面加上数字可以指定往前移动 n 个句子 │! . ? 三种符号来界定│ 
│n)      │右括号移动到下个句子的最前面          │                    │ 
│        │前面加上数字可以指定往後移动 n 个句子 │                    │ 
├――――┼―――――――――――――――――――┼――――――――――┤ 
│n{      │左括弧移动到段落的最前面              │段落是以            │ 
│        │前面加上数字可以指定往前移动 n 个段落 │段落间的空白列界定  │ 
│n}      │右括弧移动到下个段落的最前面          │                    │ 
│        │前面加上数字可以指定往後移动 n 个段落 │                    │ 
└――――┴―――――――――――――――――――┴――――――――――┘ 
（三）、更多的编辑指令 
这些编辑指令非常有弹性，基本上可以说是由指令与范围所构成。例如 dw 是由删除指令 d 与范围 w 所 
组成，代表删除一个字 d(elete) w(ord) 。 
指令列表如下： 
d 删除(delete) 
y 复制(yank) 
p 放置(put) 
c 修改(change) 
范围可以是下列几个： 
e 光标所在位置到该字的最後一个字母 
w 光标所在位置到下个字的第一个字母 
b 光标所在位置到上个字的第一个字母 
$ 光标所在位置到该列的最後一个字母 
0 光标所在位置到该列的第一个字母 
) 光标所在位置到下个句子的第一个字母 
( 光标所在位置到该句子的第一个字母 
) 光标所在位置到该段落的最後一个字母 
{ 光标所在位置到该段落的第一个字母 
说实在的，组合这些指令来编辑文件有一点点艺术气息。不管怎麽样，它们提供更多编辑文字的能力。值得 
注意的一点是删除与复制都会将指定范围的内容放到暂存区里，然後就可以用指令 p 贴到其它地方去，这 
是 vi 用来处理区段拷贝与搬移的办法。 
某些 vi 版本，例如 Linux 所用的 elvis 可以大幅简化这一坨指令。如果稍微观察一下这些编辑指令 
就会发现问题其实是定范围的方式有点杂，实际上只有四个指令罢了。指令 v 非常好用，只要按下 v 键， 
光标所在的位置就会反白，然後就可以移动光标来设定范围，接著再直接下指令进行编辑即可。 
对於整列操作， vi 另外提供了更方便的编辑指令。前面曾经提到过删除整列文字的指令 dd 就是其中一个 
；cc 可以修改整列文字；而 yy 则是复制整列文字；指令 D 则可以删除光标到该列结束为止所有的文字。 
（四）、文件操作指令 
文件操作指令多以 : 开头，这跟编辑指令有点区别。 
:q 结束编辑(quit) 
:q! 不存档而要放弃编辑过的文件。 
:w 保存文件(write)其後可加所要存档的档名。 
:wq 即存档後离开。 
zz 功能与 :wq 相同。 
:x 与:wq相同
