YYYY    2004
YEAE TWO THOUSAND AND FOUR
MM     02
MONTH   JULY
MON      JUL
DY      MON
DAY     MONDAY
DD     02

SQL> select ename , deptno , sal
  2  from emp
  3  where ( deptno , sal) in
  4  (select deptno , max(sal)
  5  from emp
  6  group by deptno);

ENAME          DEPTNO        SAL
---------- ---------- ----------
BLAKE              30       2850
FORD               20       3000
SCOTT              20       3000
KING               10       5000


select deptno , avg(nvl(sal , 0))
from emp
group by deptno
Having avg(sal) >
(select avg(sal) from emp
 where deptno = 20);

   DEPTNO AVG(NVL(SAL,0))
--------- ---------------
       30            1425
       10      2942.66667

SQL> select ename , sal , deptno
  2  from emp e
  3  where sal >
  4  (select avg(nvl(sal , 0)) from emp
  5  where deptno = e.deptno) ;

ENAME             SAL     DEPTNO
---------- ---------- ----------
BLAKE            2850         30
SCOTT            3000         20
KING             5000         10
FORD             3000         20

SQL> select empno , ename , job
  2  from emp outer
  3  where exists
  4  (select 'w' from emp
  5  where mgr = outer.empno) ;

     EMPNO ENAME      JOB
---------- ---------- ---------
      7839 KING       PRESIDENT
      7566 JONES      MANAGER


select deptno , dname , loc
from dept1
where not exists
(select 'x' from emp
where deptno = dept1.deptno ) ;


exists:子查询的返回结果越少， 越适合用该方式
in:    主查询的 返回结果越少，越适合用该方式


------------------------------结果集必须是同构的（查询的列的个数和类型要一致）---------------------
union：的结果是两个查询结果的并集， 是去掉重复值的
union all：--------------------， 是包含重复值的。

SQL> select e.ename , m.ename
  2  from emp e
  3  join emp m
  4  on e.mgr = m.empno
  5  union all
  6  select ename , 'boss'
  7  from emp
  8  where mgr is null ;

ENAME      ENAME
---------- ----------
FORD       JONES
SCOTT      JONES
CLARK      KING
BLAKE      KING
JONES      KING
SCOTT      boss
abc        boss
KING       boss

SQL> select ename , 'boss'
  2  from emp
  3  where mgr is null ;

ENAME      'BOS
---------- ----
SCOTT      boss
abc        boss
KING       boss

intersect：结果集为两个查询结果的交集 ， 不包含重复值
SQL> select deptno from emp
  2  intersect
  3  select deptno from dept1 ;

    DEPTNO
----------
        10
        20
        30

minus：是两个查询结果的差集  不包含重复值.
SQL> select deptno
  2  from emp
  3  minus
  4  select deptno
  5  from dept1 ;

    DEPTNO
----------
        40

SQL> show user
USER is "TEST"


 create table wang
 (id number primary key ,
 name varchar2(10) not null ,
 email char(40) unique ,
 res date default sysdate) ;


命名规则：
  首字母必须是英文字母
  可以包含 A-Z a-z 0-9 $和#
  不能用Oracle的关键字
  同一个命名空间不能重名
  只能是1--30个字符



rollback :回滚 取消上一步的操作  必须是sql的语句
commit:提交上一步的操作          必须是sql的语句



trim('H' from 'HelloWorld')-------->elloWorld



插入的记录中含有空值用null
 dual :是一个“伪表”，可以测试函数和表达式.
空值null 不等于  空值null


varchar2():必须定义长度 最大为4000
char 不一定要定义长度 最大为2000  缺省下为1


oracle ： 用7个字节（数字）存储日期
默认格式为DD-MON-RR
 如： 05-JAN-11
可以用数字除24 来向日期中加上或减去小时.




每张表都应该有一个主键 并且只能有一个主键。


SQL> create table wang2
  2  (
  3  id number(6) constraint wang2_id_pk  primary key ,
  4  name varchar2(20)) ;----------------------》创建列级约束

建议使用表级约束.


SQL> create table zhou
  2  (
  3  id number(5),
  4  name varchar2(10),
  5  constraint zhou_id_pk primary key(id)
  6  ) ;------------------->创建表级约束.


约束名称在同一个空间中必须不能同名!!!!!!!!



数据字典：
SQL> desc user_constraints
 Name                                      Null?    Type
 ----------------------------------------- -------- ----------------------------
 OWNER                                     NOT NULL VARCHAR2(30)
 CONSTRAINT_NAME                           NOT NULL VARCHAR2(30)
 CONSTRAINT_TYPE                                    VARCHAR2(1)
 TABLE_NAME                                NOT NULL VARCHAR2(30)
 SEARCH_CONDITION                                   LONG
 R_OWNER                                            VARCHAR2(30)
 R_CONSTRAINT_NAME                                  VARCHAR2(30)
 DELETE_RULE                                        VARCHAR2(9)
 STATUS                                             VARCHAR2(8)
 DEFERRABLE                                         VARCHAR2(14)
 DEFERRED                                           VARCHAR2(9)
 VALIDATED                                          VARCHAR2(13)
 GENERATED                                          VARCHAR2(14)
 BAD                                                VARCHAR2(3)
 RELY                                               VARCHAR2(4)
 LAST_CHANGE                                        DATE
 INDEX_OWNER                                        VARCHAR2(30)
 INDEX_NAME                                         VARCHAR2(30)
 INVALID                                            VARCHAR2(7)
 VIEW_RELATED                                       VARCHAR2(14)


select table_name , constraint_name
from user_constraints
where table_name  like 'WANG%';

SQL> alter table er
  2  add constraint er_id_pk primary key(id);

Table altered.

select constraint_name , constraint_type
from user_constraints
where table_name like 'ER';---->查询表名匹配时 表名必须大写.
CONSTRAINT_NAME                C
------------------------------ -
ER_ID_PK                       P


非空约束:
 只能定义在列级!
两种定义方式:
SQL> create table wang5(
  2  id number(3) not null,
  3  name varchar2(4) constraint wang5_name_nn not null);





SQL> create table major1
  2  (id number ,                 number：是可变长度的。
  3  name varchar2(20),
  4  constraint major1_id_pk primary key(id)
  5  );

Table created.

SQL> commit ;

Commit complete.

SQL> desc major1;
 Name                                      Null?    Type
 ----------------------------------------- -------- -----------------
 ID                                        NOT NULL NUMBER
 NAME                                               VARCHAR2(20)



SQL> insert into major1(id, name)
  2  values ( 1001,'computer') ;

1 row created.

SQL> commit ;

Commit complete.

SQL> insert into major1(id, name)
  2  values (1002, 'music') ;

1 row created.

SQL> commit ;

Commit complete.

SQL> select * from major1 ;

        ID NAME
---------- --------------------
      1001 computer
      1002 music

SQL> select length(id) from major1
  2  where name like 'music' ;

LENGTH(ID)
----------
         4

SQL> insert into major1(id , name)
  2  values ( 10001, 'manager') ;

1 row created.

SQL> commit ;

Commit complete.

SQL> select length(id) from major1
  2  where name like 'manager' ;

LENGTH(ID)
----------
         5

SQL> select * from major ;

        ID OBJECT
---------- -----------------------------
       101 java
       102 cc

SQL> select * from major1 ;

        ID NAME
---------- --------------------
      1001 computer
      1002 music
     10001 manager

SQL> create table student8
  2  ( id number ,
  3  name varchar2(20),
  4  majorId number,
  5  constraint student8_id_pk primary key(id),
  6  constraint stu_maj_fk foreign key(majorId) references major1(id)
  7  );

Table created.
