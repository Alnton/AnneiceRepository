回顾：
  内存管理 - malloc和free、sbrk
今天：
  sbrk/brk 和malloc不同，底层维护的是一个位置，通过位置的移动实现 分配/回收内存，以 1个内存页作为基本单位。
  void* sbrk(int pos)
  pos为正数，代表分配pos字节的内存。
  pos为负数，代表回收pos字节的内存。
  pos为0，代表 取当前的位置。
  
  sbrk返回移动位置之前的 位置。
  sbrk分配内存方便，但 释放内存非常麻烦。

  int brk(void* addr)
  brk 以新地址作为参数，新地址被设置为新位置
  
  经验：
   sbrk在分配内存上简单，brk在释放内存上简单。因此，开发大多数是使用 sbrk分配内存，使用brk释放内存。

  练习：
   用sbrk分配内存，用brk释放内存。
   分配一个int的空间，存放整数100.
   再分配一个double的空间，存放浮点3.14
   再分配一个长度是10的字符串空间，存放hello
   打印上面3个变量，然后 释放所有内存。

  数据结构 - 映射 (Map)
    name(key) :  zhangfei(value)
    passwd(key) : guanyu(value)
    email(key) : zhangfei@sina.com(value)

 mmap/munmap -> 内存映射(虚拟内存地址 对应 物理内存或者硬盘文件)

  每个权限(选项)其实都是用一个二进制位代表，因此用 位或(|) 连接多个权限(选项)。
  
  void* mmap(void* addr,size_t size,int 
  prot,int flags,int fd,off_t offset)
  参数 addr是开始地址，如果为0，内核指定
      size是 映射内存的大小，如果不足一个内存页会自动补足
      prot是访问权限，一般
       PROT_READ|PROT_WARITE
      flags是标识，比较常见的：
       MAP_SHARED - 共享使用
       MAP_PRIVATE - 私有，映射物理内存使用
       MAP_ANONYMOUS - mmap默认映射文件，加上标识MAP_ANONYMOUS后 映射 物理内存。
      fd - 文件描述符，映射物理内存时 置0
      offset - 文件中的偏移量，映射物理内存 置0
  返回首地址，如果错误 返回MAP_FAILED(-1)
  
  C语言对类型的检测并不是十分严格，绝大多数情况下可以自动转换。
 系统调用：
  用户层的程序不能直接访问内核层，但 内核层提供了很多函数(包括各种功能)用于做内核层和用户层的桥梁，这些函数 统称为系统调用。
  程序从用户层进入内核层时，需要封存在用户层的状态，然后进入内核层，在内核层运算完毕后，再还原回用户层的状态。
  过于频繁的调用 系统调用函数，会降低效率。
   
 文件操作(C有一套函数，Unix系统也有一套)
  Linux系统几乎一切都是文件，各种设备、目录、内存都可以通过查看文件的方式处理。因此，掌握了文件操作的函数，可以推广应用到各种IO设备
  
文件操作的相关函数：
   open() - 打开/创建文件
   read() - 读文件
   write() - 写文件
   close() - 关闭文件
   ioctl() - 文件控制函数(不过多讲解)

 在Unix/Linux系统中，用文件描述符代表一个打开的文件。本质：
  文件描述符本质是一个非负整数，但对应一个内存中的文件表，文件的信息都存在文件表中。而close(fd)只是把文件描述符和文件表的对应关系解除。
  int open(char* filename,int flag, ...)
  第一个参数是文件名(带路径)
  第二个参数是打开/新建文件的标识，常见：
  O_RDONLY O_WRONLY O_RDWR - 文件描述符权限
  O_CREAT - 创建，如果文件已存在不会新建
   O_TRUNC - 和O_CREAT联合使用，清空已 存在文件
   O_EXCL - 和O_CREAT联合使用，如果文件已存在，返回-1，而不是一个文件描述符
  O_APPEND - 以追加方式打开文件，位置放置文件的最后
  如果是新建文件的话，需要用第三个参数，第三个参数是 新建文件的权限。
  返回 文件描述符，失败 返回-1。
 
  open返回的文件描述符有限制，Linux最大到255。0,1,2 系统已经占用，用于代表标准输入、标准输出和标准错误。会返回 当前没有被使用的最小整数。文件描述符在关闭后可以被重复使用。

  size_t read(int fd,void* buf,size_t size)
   参数fd是文件描述符(open的返回值)
   参数buf是buf的指针，任意类型的指针都可以
   size是 buf的大小
   返回 实际读到的字节数，失败返回 -1

  练习：
   用open/read/write/close函数实现2个功能：
   1 写writeemp.c,
   把员工信息存入文件emp.dat，员工信息包括：
    编号ID，姓名，薪水
   2 写reademp.c,
    再把刚才存入的员工信息读出，并打印。
  
  作业&练习：
   改良上面的练习，实现 可以用 vi直接查看到id、姓名和薪水的值。
   思路：把写入 结构 改为 写入字符串 即可。
    如何 把 int和double 放入 字符串？
    要求：id、姓名和薪水都用scanf输入，ID用int格式，sal 用 double格式输入。

    找 sprintf() 函数
 

 
  





