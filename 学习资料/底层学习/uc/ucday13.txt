回顾：
  IPC - 信号量集，就是一个计数器数组，需要设置初始值。
  网络编程 - 网络常识、本地通信、网络通信
   1 socket 2 sockaddr_in 3 bind/connect 4 read/write 5 close
今天：
  TCP一对多 
  UDP编程
  线程
  TCP一对多编程步骤：
   Server端:
    1 调用socket()创建socket,type必须SOCK_STREAM(保证使用TCP模式)
    2 准备通信地址sockaddr_in
    3 bind()绑定
    4 监听 listen()，为accept()做准备
    5 等待客户端的连接 accept()
  int accept(int sockfd,struct sockaddr*
    addr,socklen_t* len)
    参数sockfd 就是第一步的socket
    参数addr 就是连接上来的客户端的通信地址
    参数len 是一个传入传出参数，传入通信地址的大小，传出客户端通信地址的大小
    返回新的 socket 描述符，用来和客户端进行通信。
    6 读写数据 read/write
    7 关闭socket
   注：第一步的socket主要用于等待连接，不参与信息交互。第五步的socket主要用于和客户端之间的通信。
   Client端:
    和昨天完全一样。

  UDP - 用户数据报协议
   关于TCP和UDP的区别：
    TCP - 有连接协议，在通信的全程保持连接。
     TCP优点：重发一切错误数据，保证数据的正确和完整，缺点：服务器端压力非常大，资源占用率比较高。
    UDP - 无连接协议，在发送数据时连一下，不保持任何的连接。  
     UDP优点：效率高，资源占有少。缺点：不保证数据的完整和正确。

  UDP网络编程的函数 - 发送数据和接收数据
   sendto() 和 recvfrom()
 
  几点注意：
   1 第二步准备通信地址，都是指 server端的通信地址。
   2 客户端的通信地址，TCP 用accept()函数拿，UDP用recvfrom拿(发送端)。客户端的port是自动分配的。
   3 TCP的信息交互函数：read/write/send/recv
    UPD的信息交互函数：read/write/send/recv,但上面的函数都不能取得发送方通信地址，因此更多时候，使用sendto/recvfrom 。
   4 网络信息接收函数 一般都会 阻塞代码。
   5 服务器端都必须使用bind()，bind()函数的作用就是 服务器端开放一个端口(把端口和进程绑定起来)。而 客户端 自动完成的。

  线程 - 隶属于进程，是进程中的程序流。操作系统中 支持多进程，每个进程内部 支持多线程。多线程 并行(同时执行)代码。
  进程 是重量级的，每个进程都需要独立的内存空间。新建进程 对于 资源是 较大消耗。
  线程 是轻量级的，线程不拥有独立的内存资源，共享 所在进程的内存资源，但每个线程 都拥有一个独立的栈区。
  开发程序中，多线程 使用概率更高。

  进程中 可以有多个线程，但必须有一个主线程(main函数)。

  由于CPU 不可分，真正意义的并行其实不存在的，针对时间点的并行是不存在的。人的感官都是针对时间段(很少)。主流的操作系统 都是使用 CPU时间片的方式 实现并行。每个CPU时间片都是 极少的CPU运行时间。
  多线程编程有一套成形的API，属于POSIX规范。
   提供了一个头文件pthread.h 和一个 共享库文件libpthread.so 。因此在编写 多线程代码时，需要#include <pthread.h>，链接时 需要加 
  -lpthread 或 -pthread 






