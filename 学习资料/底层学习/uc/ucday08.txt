回顾：
  进程 - 进程的概念和相关命令(ps/kill)
   进程创建 - fork() 、 vfork()
   fork()通过复制 父进程创建子进程，除了代码区共享之外，其他的区域都会被复制。如果有文件描述符，只复制描述符，不复制文件表。
   进程的退出方式：
    正常退出 - return(main函数)、exit()/_Exit() 
    非正常退出 - 信号
   父进程等待子进程的函数 - wait()/waitpid()
今天：
  进程 - waitpid() 
   进程创建的第二种方式 vfork()+exec系列函数
   这种方式用于父子进程执行完全不同的代码段
  信号 - 信号的概念和基本处理方式
   waitpid()和wait()
   pid_t waitpid(pid_t pid,int* status,int options)
   返回值和wait一样。
   参数：pid可以选择等待的子进程
    -1 等待所有子进程
    >0 等待进程ID=pid的子进程(就等一个)
     0 等待和父进程在一个进程组的子进程
    <-1等待pid绝对值对应的进程 所在的进程组中的所有子进程
   注：关于进程组的选项用到的时候再研究。
    
     status和wait参数一样
     options可以设置等待方式，0默认方式，也可以指定为 非阻塞的等待(WNOHANG)

   如果子进程需要执行与父进程完全不同的代码段，可以使用 vfork+exec系列函数的方式。
   vfork()负责创建新的子进程
   exec系列函数负责 执行新的代码段
    vfork()函数 用法和fork()一样，但 不复制父进程的内存空间，会直接占用 父进程的内存空间。
   因此：vfork()创建子进程，子进程会占用父进程的内存空间，导致父进程阻塞，而子进程继续运行。vfork()确保子进程先于父进程运行。vfork
()的目的是 调用exec系列函数。当vfork()创建的子进程调用exec系列函数后，把之前占用的父进程内存空间还给父进程，子进程使用exec系列函数调用程序对应的内存空间和代码段。此时，父子进程同时运行。
   fork()+exec系列函数也可以执行新的代码段，但效率相对较低(多了内存的复制)。
   exec自身不是一个函数，是6个以exec开始的函数，功能完全一样的，因此掌握一个即可。

  信号 - Unix/Linux系统用信号做 软件中断
   1 中断
   中断当前正在执行的程序，转而执行其他的代码
   中断的方式有两种：硬件中断、软件中断。
    Unix系统中，最常用的软件中断就是信号
   2 信号(signal)
    信号 - Unix/Linux系统中最常用的软件中断
    常见信号：
      Ctrl+c -> 信号2
      段错误 ->  信号
      总线错误 -> 信号
      int被0除 -> 信号 (浮点数例外)
      子进程结束，给父进程发信号

    信号的本质是一个非负整数，每个信号都对应了一个宏名字，以 SIG开头。比如：
    信号2 -> SIGINT
    程序员无法确定信号什么时候来，也不知道会不会来。因此，信号是 异步的。
    多个进程之间 可以 互发信号。

   kill -l显示当前系统下所有的信号(名字和值)

   
Linux系统信号1 到 64，不保证信号是连续的
   Unix系统信号和Linux系统信号不一样，1到48，并且有些信号的值也不同。
    因此，在编程时，信号最好使用宏名字，防止不同系统的值不同。
   信号的分类
    1-31是不可靠信号，这种信号有可能丢失，不支持排队，属于非实时信号。
    34-64是可靠信号，这种信号不会丢失，支持排队，属于 实时信号。
   信号如何处理？
    信号处理方式：
    1 默认处理，大多数的默认处理都是结束进程
    2 忽略信号
    3 程序员自定义处理，写处理函数，注册后生效。
   注：1 信号9只能默认处理，不能忽略也不能自定义
     2 信号的发送受用户限制，每个用户只能给自己的进程发信号， root用户可以给所用用户的进程发信号。
   
   信号处理的方式 可以使用 信号注册函数指定。
    信号处理的注册函数signal()/sigaction()
    typedef void(*sighandler_t) (int)
    sighandler_t signal(int signum,
sighandler_t)
    参数signum 代表信号名/信号值
    参数sighandler_t是一个函数指针，可以为：
   SIG_IGN - 忽略信号signum
   SIG_DFL - 默认处理信号signum  
   函数名  - 调用函数处理信号signum

  返回值为SIG_ERR 代表出错。

  子进程对应父进程信号处理方式的沿袭性？
   fork()创建的子进程 完全照搬父进程的处理方式；父进程默认，子进程也默认；父进程忽略，子进程也忽略；父进程是自定义，子进程也是一样的函数。
   vfork()+exec系列函数 创建的子进程，父进程默认，子进程也默认；父进程忽略，子进程也忽略；父进程自定义，子进程改为默认处理。 因为：exec系列函数启动新的代码段，新的代码段没有父进程中的代码(处理函数代码没有)。   

  如何发送信号？
  1 键盘发送(只能发送某些特殊信号) 
    ctrl+c -> 信号2 SIGINT
    ctrl+\ -> 信号3 SIGQUIT
    ctrl+Z -> 信号20
   ...  
  2 程序出错(只能发送某些特殊信号)
    段错误  -> 信号11 SIGSEGV
    整数除0 -> 信号8  SIGFPE
    总线错误-> 信号7  SIGBUS
   ...
  3 kill -信号 进程ID (全部都能发)
  4 系统函数发送(全部都能发)
    raise()/kill()/alarm()/sigqueue()
   ...
   raise()只能给进程自己　发信号
　 sleep()会休眠n秒，或者被非忽略信号打断。
　　返回剩余秒数。
   usleep()休眠n微秒

  作业：
   写一个myls，实现ls -l的效果，对于文件来说，显示详细信息；而如果ls的是目录，需要显示目录子项的详细信息。具体效果参考ls -l 。



   
