做项目和写代码有区别
UC/VC -> 按手册写代码
要求：把昨天的案例代码 必须自己独立完成一次
今天：
  IPC - 信号量集
  网络 - 网络常识、本地通信(IPC)、网络通信
  信号量(semaphore)就是一个计数器，用于控制 同时访问资源的进程总数。信号量集 就是由 信号量组成的数组。IPC创建/获取 只能得到信号量集。
  计数器的工作方式：
   1 先把计数器初始化为 最大值。(一次)
   2 有进程 申请资源 计数减1。
   3 计数为0 终止进程的对共享资源访问，申请访问共享资源的进程就会被阻塞。
   4 有进程 结束使用 计数加1。
   5 阻塞的进程如果 计数大于0，就可以拿到共享资源(计数到0 其他进程继续阻塞)。
   信号量集的使用步骤：
    1 ftok()得到key
    2 semget() 创建/获取信号量集
    3 semctl()初始化信号量集，给每个信号量最大值。
     semctl(semid,信号量下标,SETVAL,最大值)
    4 semop()可以对信号量的计数 进行加1/减1
    5 如果不再使用信号量集，使用semctl()删除
  int semop(int semid, struct sembuf semoparray[],size_t nops);
   参数semoparray是一个指针，它指向一个信号量操作数组，信号量操作由sembuf结构表示：
 struct sembuf{
  unsigned short sem_num;//操作信号量的下标
  short sem_op; //对信号量操作方式。
  short sem_flg; //信号量的操作标记，默认为0
};
  sem_op为-1时，计数减1  为1时，计数加1
  sem_flg 为0 阻塞， 也可以用IPC_NOWAIT代表非阻塞(就是不再等待)

  网络常识 -- 记忆、了解
   OSI 7层模型 (人机交互)
   物理层、数据链路层、网络层、传输层、会话层、表现层、应用层
    常见协议：
     tcp / udp / ip / http / ftp / ...
   
  IP地址 - 就是计算机在网络中的地址，是一个32位的整数(IPV4)，目前也有IPV6。
   IP地址在计算机中，以一个整数格式保存。因此IP地址在底层的描述方式：8位 16进制。点分10进制是 人类描述IP地址的主要方式。每个字节计算一个10进制的整数，中间用 . 隔开。
   192.168.0.20 (点分十进制 0-255)
 == C0 A8  00 14 (8位16进制)
  IP地址分为A B C D 4类。
  子网掩码 - 判断计算机是不是在一个局域网上
    166.111.160.1与166.111.161.45
   子网掩码：255.255.254.0
    166.111.160.1
    255.255.254.0 (位与)
   --------------
    166 111 160 0 
    
    166.111.161.45
    255.255.254.0 (位与)
   ---------------
    166 111 160 0

  IP地址只能定位计算机，但没有访问权限。
  端口会开放访问的权限。端口 可以用来定位计算机中的某个进程。
   网络编程 必须提供 IP地址和端口号。
   端口号 是unsigned short，范围：0-65535
    0-1023  固有端口 (不推荐使用) 计算机预留
    1024 - 48XXX 程序员使用的端口 按照某些程序也会占用，但 很少
    48XXX - 65535 不建议使用 ，不稳定
  
  MAC地址，物理地址，是网卡的物理地址。IP地址和MAC地址绑定在一起。
  字节次序 - 计算机在存储整数时，有 从高到低和 从低到高 之分，叫 字节次序。 字节次序在计算机中不确定，在网络传输的过程中是固定的。
  因此对于端口，需要 本地格式和网络格式之间的转换。
  域名，俗称网址，就是IP地址的助记，通过域名解析服务器把 网址解析 成IP地址完成访问。

  网络编程 - Windows/Unix 都支持
   socket编程 
   socket - 插座、套接字(IP + 端口)
 关于socket编程的一些函数和常识
  socket编程 分为：一对一  和 一对多
   一对一 ：
   socket通信 包括 本地通信(ipc)和 网络通信
   一对一 通信模型：
   服务器端编程步骤：
    1 创建一个socket，使用socket()
     int socket(int domain,int type,
       int protocol)
     domain - 域 ，用来选择协议
      PF_UNIX PF_LOCAL PF_FILE 本地通信
      PF_INET  网络通信
      PF_INET6 网络通信(IPV6)
     注：PF也可以换成AF
     type - 用来选择通信类型
      SOCK_STREAM - 数据流，针对TCP协议 
      SOCK_DGRAM -  数据报，针对UDP协议
     protocol - 本来应该用来指定协议，但没用，因为协议已经被前2个参数指定，给0 即可
    返回socket描述符，用法接近fd 失败返回-1.
   
    2 准备通信地址
      关于通信地址有3个结构体：
     struct sockaddr{
       int sa_family; //协议
       char sa_data[];//地址  }
     这个结构sockaddr不被真正使用，只是用来做相关函数的参数(不存数据)。
    本地通信使用结构体：
    #include <sys/un.h>
    struct sockaddr_un{
      int sun_family;//协议
      char sun_path[];//socket文件的路径 }
    网络通信使用结构体：
    #include <netinet/in.h>
    struct sockaddr_in{
     int sin_family;//协议
     short port;//端口号
     struct in_addr sin_addr;//IP地址 }
    3 绑定函数bind()
     bind(int sockfd,sockaddr,length)
    4 通信 (read/write)
    5 关闭 close(sockfd);
   客户端编程步骤
    与服务器端基本一样，除了第三步，第三步使用connect()，参数与bind 一样。
   注：服务器和客户端数据交互时，读写必须保持一致性(一边读，另外一方写)。


  查看本机IP地址的命令：
   Windows - ipconfig
   Unix - ifconfig
   whereis 可以查看命令所在目录
   ping IP地址 可以 检测网络是否畅通


