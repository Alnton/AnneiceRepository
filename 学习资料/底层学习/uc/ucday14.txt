回顾：
  网络编程 - TCP UDP
    TCP：SOCK_STREAM
    UDP：SOCK_DGRAM
   TCP有连接协议，UDP无连接协议
   TCP和UDP读写函数不同，UDP专用：sendto/recvfrom 
   TCP一对多模型 Server端 7步
  线程的概念和原理 - 线程存在于进程之中
   线程共享进程的内存空间，轻量级的并行技术
   线程是使用CPU时间片技术实现的。
今天：
  如何创建线程？
   关于线程的大多数函数/成员变量都是以pthread_ 开头。
  int pthread_create(pthread_t* id,
pthread_attr_t* attr,void* (fa)(void*),
void* p)
  参数 id 用于存储新建线程的ID
    attr用于传入新建线程的属性，一般0即可
    fa是函数指针，线程执行的代码写成函数fa并在创建线程时传入。
    p 是fa的参数，如果不需要 0 即可。
   返回：0代表成功。失败返回 错误码。
  注意：线程的错误处理不使用 errno，而是直接返回。
   当同一进程内部有多线程时，每个线程内部的代码顺序执行，而多线程之间的代码 乱序执行。
   多线程之间 互相独立，但也相互影响。
   主线程结束，进程随之结束;进程结束，进程中的所有线程都结束。

   线程的参数由 pthread_create的第4个参数传入，返回值 由 pthread_join的第二个参数获取。
   函数pthread_exit(void*) 也可以退出线程并且也有返回值(参数void*就是线程的返回值)。
   函数exit()退出的是进程(所有线程)，pthread_exit()退出单个线程。

   线程的运行有两种状态：
    非分离状态 - 可以用函数 pthread_join
     分离状态  - 可以用函数 pthread_detach
    两者区别：
     非分离状态的线程 资源回收要到 join函数结束以后；分离状态的线程 资源马上回收。
    处于分离状态的线程 无法join(join没效果)

 经验：
  线程启动以后，最好 设置join或者设置detach
 
  线程的取消 - 线程 可以被 其他取消，有一套API(了解)
  
  线程同步 - 
   因为多线程之间共享进程的资源，多个线程同时访问相同的资源时需要互相协调，以防止数据出现不一致、不完整的问题，线程之间的协调和通信叫线程同步。
  线程同步有很多解决方案：
   线程同步的思路：访问共享资源时，不能并行，而是串行(一个一个的访问)。
   pthread中，提供了互斥量(互斥锁) 实现线程同步。
   互斥量的使用步骤：
    1 定义互斥量 pthread_mutex_t lock;
    2 初始化互斥量，方法有二：
      pthread_mutex_init(&lock,0);
    或在定义的用宏同时赋值：
     pthread_mutex_t  lock=
       PTHREAD_MUTEX_INITIALIZER;
    3 加上互斥锁(给访问共享资源的代码加)
     pthread_mutex_lock(&lock);
    4 访问
    5 解锁 pthread_mutex_unlock(&lock);
    6 释放互斥锁的资源
     pthread_mutex_destroy(&lock);



