回顾：
  信号 - 信号屏蔽sigprocmask()/sigpending()
         信号注册函数sigaction()
         sigqueue()发送信号的同时附带数据
        计时器(真实计时器)每隔一个时间发信号
  IPC - 进程间通信
        文件/信号/管道/共享内存/消息队列/信号量集/网络 ....
  
今天：
   无名管道、共享内存和消息队列
   无名管道主要用于 fork父子进程之间的通信。
   XSI IPC - 共享内存、消息队列和信号量集
    共享内存、消息队列和信号量集都有一些共同的特点：
   1 创建时都需要一个key，key是一个整数，程序使用key获取IPC结构(内核创建的通信媒介)。
   2 key(类型 key_t)的生成方式有三种：
    2.1 宏IPC_PRIVATE直接做key，但这种方式很少使用，PRIVATE会导致IPC结构能创建但无法获取
    2.2 定义一个通用的头文件，所有key都定义在头文件中。
    2.3 系统函数ftok()可以自动生成key，ftok用两个参数生成key，真实存在的路径+项目编号。
   3 所有IPC结构都有一个唯一标识 -- ID。
     key是用来进入IPC结构的，在IPC内部，用ID标识每个IPC结构。
   4 创建IPC结构时，需要一个标记参数flags，这个参数固定为： IPC_CREAT|权限
   5 每种IPC结构都提供一个ctl函数，至少提供以下功能：
   IPC_STAT: 取IPC结构的相关属性(状态) 
   IPC_SET : 修改IPC结构的属性(一般只能权限)
   IPC_RMID: 删除IPC结构

  ipcs -a 显示所有IPC结构
  ipcs -m 显示共享内存
       -q 显示消息队列
       -s 显示信号量集
  ipcrm 删除IPC结构
       -m 共享内存ID 其他类似
  共享内存 - 就是以 系统内核维护的一块内存做媒介，最快的IPC。
  使用步骤：
   1 得到key(ftok())
   2 用key获取shmid(shmget())
   3 挂接共享内存(shmat())，虚拟地址映射内存
   4 使用共享内存
   5 脱接共享内存(shmdt())，解除映射
   6 如果所有的进程都不再使用，删除共享内存

 共享内存虽然速度最快，但 如果 多进程同时写时，无法保证数据的正确和有效。
  共享内存的操作函数 - shmctl()
   可以查询、修改、删除 共享内存。

 数据放入消息中，消息放入队列中 - 消息队列
  消息队列的应用最广泛。
  A - > a  1类型
  B - > b  2类型
  C - > c  3类型
  D - > d  4类型
  消息分为有类型消息和无类型消息，
   无类型消息：支持任意类型，字符串/int/浮点
   有类型消息：必须是结构体类型，而且结构体的第一个成员必须是类型，格式如下：
   struct 名字{
     long mtype;//消息的类型，必须这么写
     char buf[];//随意的，任何类型都可以
   };
  消息队列由 内核创建和维护。
   消息队列的编程步骤：
   1 得到key(ftok())
   2 创建/取得 msgid(msgget())
   3 发送/接收消息(msgsnd()/msgrcv())
   4 如果确定不再使用，可以删除(msgctl)

  msgsnd和msgrcv
  msgsnd(int msgid,&msg,sizeof(msg),
0/IPC_NOWAIT)
  第四个参数0 ，发送不出去(队列满)时等待
   IPC_NOWAIT ，队列满时 返回错误，不等待
  
  msgrcv(int msgid,&msg,sizeof(msg),
   long mtype,0/IPC_NOWAIT)
   mtype 决定了接收何种类型的消息
    0  代表接收 任意类型的消息(先入先出)
    >0 代表接收 特定类型(mtype)的消息
    <0 代表接收 类型小于等于mtype绝对值的消息，优先选择 消息类型小的消息
  
  商业项目的流程：
   1 需求分析(客户需要什么东西？)
   2 系统分析和系统设计
   3 编程(coding)
   4 测试 
   5 安装、调试、维护
  作业：
   1 明天综合案例 - 简单银行基本操作系统
   实现需求分析和基本的系统设计，思考需要用到的技术。
  
   2 消息队列、信号signal的基本用法、进程和文件操作。 
   



