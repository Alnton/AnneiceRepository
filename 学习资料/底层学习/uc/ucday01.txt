 UC -> Unix/Linux系统下C的开发
 UC 15天左右的时间
 内容：
   Unix/Linux 系统基本概述
   Unix/Linux 编程基础和开发方式
   Unix/Linux 内存管理
   Unix/Linux 文件管理和目录操作
   Unix/Linux 进程管理
   Unix/Linux 信号(ctrl+c)
   Unix/Linux 进程间通信(IPC)
   Unix/Linux 网络编程
   Unix/Linux 多线程编程

  张立猛
  C++教学总监
  zhanglm@tarena.com.cn 
  
   大家不太愿意动手，这样不行
   要求：多动手，多问。

  今天：
   1 Unix/Linux 简介(了解)
   2 gcc编译器(深入了解)
   3 头文件、库文件(静态库和共享库)
   4 环境变量的概念
  C语系
   Linux是免费开源的类Unix系统，发展过程中，面临三大问题：
   界面、兼容性、版权。
   界面问题由GNU解决。Linux应该称为GNU Linux
   兼容性问题由POSIX规范解决，所有的Unix和类Unix系统都遵循POSIX规范。
   版权问题由GPL(通用公共许可证)解决，只需要告知别人原作者就可以随便使用和修改。
  
  gcc是编译器，功能：预处理、编译、连接、汇编
  gcc -E 预处理
  gcc -S 汇编
  gcc -c 只编译，不连接
  gcc -o 改变目标文件名
  gcc -std 设置C89或者C99规范
  gcc -v 查看版本
  gcc -Wall 显示尽可能多的警告，提升代码质量

  头文件的作用：
   各种声明、定义放在.h文件，具体的实现放入.c文件。
   写程序编译之后，再打包成库文件。调用者拿到头文件和库文件 去使用代码。
  
   预处理、汇编、编译和连接的作用：
   预处理 - 针对指令，指令的语法和纯C语法不一样，预处理把指令全部转换成纯C语法。
   汇编 - 高级语言通过汇编转换成汇编语言
   编译 - 把汇编语言(高级语言也需要转汇编)转换成机器语言(目标文件)。
   连接 - 把所有相关的机器语言整合在一起，并且连接起来。
  注：广义的编译 包括 汇编和编译。

 预处理的指令
   标C已学过：#include  #define  #if条件编译
   新的指令：
    #error 错误    #warning 警告
    #pragma  额外指定一些功能，增强指令
    #line 指定行号(不常用)
   
   #pragma 的三种用法：
   #pragma GCC dependency 指定文件名
    比较两个文件(当前文件和指定文件)的最后修改时间，如果当前文件修改时间先于指定文件，会产生一个警告
   #pragma GCC poison 标示符(词)
    把词作为毒药，一旦使用，就产生错误
   #pragma pack(整数)
    改变结构的对齐和补齐方式

 编程环境
   环境变量 - 开发软件时，操作系统会预先启动一些东西并放入内存。比如：
   Path（Windows）
   PATH(Unix/Linux)
   叫做系统路径，在系统路径中的程序不需要加上目录运行。
   Unix常用的shell包括：
    sh - 最早的shell，距今40多年了，功能落后
    bash - 是 sh的增强版，应用最广的shell
    csh - 是按照C程序员习惯写的shell
   
    telnet 192.168.0.20
     用户名：openlab
     密码 ： open123

   如何把一个目录配置到系统路径PATH中？
   在bash中的配置方法：
    export PATH=.:$PATH
    . 代表当前目录
    : Unix下的路径分隔
    $PATH 就是把之前的PATH接过来(保证其他命令不受影响)
    不能写错，否则后果很严重。。。
   如果想每次都可以直接使用，需要配置在启动文件中，登陆目录下：.bashrc 或 .bash_profile
  在最后加上export PATH=.:$PATH 保存退出即可

  注意：重启后生效 或者 source .bashrc 生效
  
  C程序相关的环境变量：
   CPATH - C语言头文件的系统路径
   LD_LIBRARY_PATH - 定位共享库的路径
   LIBRARY_PATH - 查找库的路径
  
  头文件的查找
   1 某些系统路径 默认可以查找头文件，比如：
    /usr/include 
   2 配置相关环境变量 (CPATH/C_INCLUDE_PATH)
   3 gcc -I 头文件所在目录 
   4 ""形式的头文件可以在当前目录查找

   必会：3 和 4 
   
   库文件
   为了调用者 使用更方便，程序不能直接提供.c文件或.o文件，需要把相关的 .o文件打包成一个或者多个库文件。编写者 提供 库文件和头文件即可
   库文件分为两类： 静态库(.a)和共享库(.so)
   静态库就是把代码归档到一起，在调用时直接复制代码段到可执行程序中，而共享库也把代码归档到一起，在调用时给调用者留下代码的地址。
   静态库和共享库的优缺点：
   静态库的优点 执行效率稍高，代码连接后与静态库文件完全脱离，因此一个可执行文件即可完全运行。缺点是 过于占用硬盘空间，修改和维护都不方便。
   共享库的优点就是修改和维护方便，硬盘空间占用较少，缺点：速度稍慢，在运行时除了可执行文件还需要所有共享库文件。
   






