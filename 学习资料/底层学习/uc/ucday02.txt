回顾：
  Unix/Linux简介
  gcc编译器的使用
  环境变量和环境变量的配置
  头文件
  静态库和共享库
今天：
  静态库、共享库的生成和使用
  C程序的错误处理
  环境变量和环境表
  Unix/Linux内存管理

  静态库的生成步骤：
   1 写源程序 add.c，保存退出。
   2 编译源程序，得到目标文件(.o文件)。
     gcc -c
   3 打包生成静态库文件
     ar -r lib名字.a xx.o (.o文件可以多个)
   库文件名字 命名规范：以lib开头，以 .a结束

   注：在调用静态库时，需要库文件和头文件。
  静态库的调用步骤：
   1 写调用的源程序 test.c ，保存退出
   2 编译代码，生成 .o文件。
   3 连接test.o 和 静态库，连接方式有三种：
    a) gcc test.o lib名字.a (直接连)
    b) 先配置环境变量LIBRARY_PATH，把静态库文件所在的路径配置进去，然后：
     gcc test.o -l库名字 (库名字去掉lib和.a)
    c) gcc test.o -l库名字 -L库路径

   注：Unix多用第三种方式。

  共享库的生成步骤：
   1 编写源程序 add.c，保存退出。
   2 编译源程序，生成 .o文件。
    gcc -c -fpic add.c (不写-fpic也行)
   3 生成共享库文件(.so)
    gcc  -shared add.o -olib名字.so
    也需要提供头文件。

  共享库的使用步骤：
   共享库的使用步骤 与 静态库基本相同。
  注:共享库的连接方式和静态库一样，但在运行时需要额外配置环境变量 LD_LIBRARY_PATH，否则就找不到库文件。
  export LD_LIBRARY_PATH=.

  ldd 命令可以查看共享库的调用关系。

  共享库还有一种特殊的使用方式，就是像打开一个文件一样的使用。
   步骤：
   1 打开一个共享库文件。dlopen()
   2 在打开的共享库文件中获取一个函数。dlsym
   3 执行函数。
   4 关闭共享库文件。dlclose()
  dlerror() 处理错误信息。

   dlopen()有两个参数，第一个参数是文件名，第二个参数必须是：RTLD_LAZY 或 RTLD_NOW，区别：
  RTLD_LAZY - 延迟加载，open时不真正加载，到使用时再加载。
  RTLD_NOW  - 现在加载，open的同时完成加载

   dlerror()在调用 dlopen/dlsym/dlclose之后立刻调用，效果：如果上面的函数出现错误，返回错误信息，如果没有错误，返回NULL。
   
  C程序员的错误处理
   C语言通过函数的返回值代表错误，方式：
   1 如果返回值 是 指针类型，一般用NULL(0)代表出错。特殊情况下，用 -1 代表出错。
   2 返回值是int类型，如果返回数据不可能是负数，可以用 -1 代表出错，其他数据正常返回。
   3 返回值是int类型，如果返回数据可能是负数，需要用指针取出返回数据，返回值不再返回数据，而是代表是否出错，-1代表出错，0代表成功。
   4 如果不需要考虑是否出错，返回值用void。
  注：以上4种方式只是惯例，不是一定如此。


练习：
  写4个函数，分别应用上面的4种方式
  返回1-10的随机数，如果随机数为5，返回错误 2
  计算两个整数的最大值，如果相等，返回错误 3
  传入一个字符串，如果传入的字符串是error，返回错误，否则返回ok  1 
  打印传入的字符串 4
  难度上： 4 1 2 3 
  
  关于时间
   C语言的时间有两种常见的描述方式：
 秒差time_t - 和1970年1月1日0点0分0秒的 秒差
 结构struct tm - 包括年月日小时分秒
  计算机更多的使用 time_t , 转换函数：
   localtime()
  注：结构tm在使用时，年需要加上1900，月加1
    
  字符串的常用函数：
  strcpy - 复制字符串，经常用来赋值
  strcmp/strncmp - 比较字符串(相等、大小)
  strlen - 字符串的长度，到'\0'为止
  strcat - 字符串的连接

  C语言也定义了一些处理错误的函数的变量：
   可以直接使用的外部全局变量，errno 代表的错误的编号，不包括错误信息。
   三个相关函数：
   strerror - 把errno的编号 转换成 错误信息
   perror -直接打印错误信息，还可以传附加信息
   printf - 用%m代表打印错误信息，也可以传附加信息
   其中 前2个比较常用

  注：不是所有的函数都 用errno表示错误。
  
  errno只有在函数出错时才改变值，如果函数正确不改变值。所以 errno不能用于判断是否出错。判断是否出错 用 函数的返回值。

  每个程序都可以 通过 环境表获得所有的环境变量。环境表是一个字符指针数组，extern char** environ; environ 不需要额外赋值，就是环境表的首地址。用 environ 可以获取所有的环境变量。
字符串数组 基本都以NULL结束。
 
  指针的算数运算(+、-)移动的字节数由指向的类型决定。int* 加1 移动4个字节，char* 加1移动1个字节。

作业：
  写两个函数，分别打印实心菱形和空心菱形，把他们分别做成静态库和共享库，写一个test.c调用
  提示：实心菱形必须做，空心菱形尽量做。

   *
  ***
 *****
  ***
   *

